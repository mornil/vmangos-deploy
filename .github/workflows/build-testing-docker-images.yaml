name: Build and push Docker images for testing

on:
  workflow_dispatch:
    inputs:
      owner:
        description: The owner of the VMaNGOS code repository to use
        default: vmangos
        required: true
        type: string
      repository:
        description: The VMaNGOS code repository to use
        default: core
        required: true
        type: string
      revision:
        description: The VMaNGOS code repository revision to use
        default: development
        required: true
        type: string
      client-version:
        description: The client version for which to build VMaNGOS
        default: 5875
        required: true
        type: number

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_SERVER: ${{ github.repository_owner }}/vmangos-server-testing
  IMAGE_NAME_DATABASE: ${{ github.repository_owner }}/vmangos-database-testing

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      commit-hash: ${{ steps.latest-commit-hash.outputs.result }}
      already-built: ${{ steps.already-built.outputs.result }}

    steps:
      # If the original MariaDB entrypoint script changes, we can't guarantee
      # that our custom version (which relies on functions defined in the
      # original) will still work, so we fail the workflow run at this point.
      - name: Check if MariaDB entrypoint script has been updated
        id: mariadb-entrypoint-check
        run: |
          known_entrypoint=https://raw.githubusercontent.com/MariaDB/mariadb-docker/0ec02f517e896dd99fb71f4fa8540f3d415f37c5/11.3/docker-entrypoint.sh
          # FIXME: MariaDB 11.3 code has been removed from the mariadb-docker
          # repository before 11.4 was released, so we have to pin to the last
          # commit where 11.3 is available for this check to pass (until 11.4
          # gets released).
          # latest_entrypoint=https://raw.githubusercontent.com/MariaDB/mariadb-docker/master/11.3/docker-entrypoint.sh
          latest_entrypoint=https://raw.githubusercontent.com/MariaDB/mariadb-docker/0ec02f517e896dd99fb71f4fa8540f3d415f37c5/11.3/docker-entrypoint.sh
          curl -o known-entrypoint.sh $known_entrypoint
          curl -o latest-entrypoint.sh $latest_entrypoint
          diff known-entrypoint.sh latest-entrypoint.sh

  build-and-push-server-images:
    name: Build and push server images
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        use-anticheat: [0, 1]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate tags
        uses: actions/github-script@v7
        id: generate-tags
        env:
          IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_SERVER }}
          OWNER: ${{ github.event.inputs.owner }}
          REPOSITORY: ${{ github.event.inputs.repository }}
          REVISION: ${{ github.event.inputs.revision }}
          CLIENT_VERSION: ${{ github.event.inputs.client-version }}
          USE_ANTICHEAT: ${{ matrix.use-anticheat }}
        with:
          result-encoding: string
          script: |
            const tags = []

            const useAnticheat = parseInt(process.env.USE_ANTICHEAT) === 1

            const potentialAnticheatSuffix = useAnticheat
              ? '-anticheat'
              : ''

            tags.push(`${process.env.IMAGE}:${process.env.OWNER}-${process.env.REPOSITORY}-${process.env.REVISION}-${process.env.CLIENT_VERSION}${potentialAnticheatSuffix}`)

            return tags.join(',')

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64, linux/arm64
          file: ./docker/server/Dockerfile
          push: true
          provenance: false
          build-args: |
            VMANGOS_OWNER=${{ github.event.inputs.owner }}
            VMANGOS_REPOSITORY=${{ github.event.inputs.repository }}
            VMANGOS_REVISION=${{ github.event.inputs.revision }}
            VMANGOS_CLIENT_VERSION=${{ github.event.inputs.client-version }}
            VMANGOS_USE_ANTICHEAT=${{ matrix.use-anticheat }}
          tags: ${{ steps.generate-tags.outputs.result }}

  # Since the database image builds only take a few minutes (and therefore
  # always complete before the server image builds), we need to build after the
  # server images; otherwise, we would push new database images without knowing
  # if the server image builds will succeed (and if there is, e.g., a
  # compilation error due to a bug upstream we would end up with a version
  # mismatch between the latest database images and the latest server images).
  build-and-push-database-images:
    name: Build and push database images
    needs: [setup, build-and-push-server-images]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate tags
        uses: actions/github-script@v7
        id: generate-tags
        env:
          IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_DATABASE }}
          OWNER: ${{ github.event.inputs.owner }}
          REPOSITORY: ${{ github.event.inputs.repository }}
          REVISION: ${{ github.event.inputs.revision }}
        with:
          result-encoding: string
          script: |
            const tags = []

            tags.push(`${process.env.IMAGE}:${process.env.OWNER}-${process.env.REPOSITORY}-${process.env.REVISION}`)

            return tags.join(',')

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64, linux/arm64
          file: ./docker/database/Dockerfile
          push: true
          provenance: false
          build-args: |
            VMANGOS_OWNER=${{ github.event.inputs.owner }}
            VMANGOS_REPOSITORY=${{ github.event.inputs.repository }}
            VMANGOS_REVISION=${{ github.event.inputs.revision }}
          tags: ${{ steps.generate-tags.outputs.result }}
